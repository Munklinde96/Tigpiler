(* User Declarations *)
structure A = Absyn
%%

(* Parser Declarations *)
%term
    EOF 
  | ID of string
  | INT of int 
  | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS

%nonterm  exp | program | decs | dec | vardec | fundec | lvalue | error
  | tydec | ty | tyfields | tyfieldsTail | boolexp | compexp | mathexp 
  | functionCall | functionParam | functionParamTail | control | assignment 
  | ifTail | sequenceTail | sequenceExp | sequence | array | record | recordTail

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
    DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

(* Precedence Directives *)
%nonassoc   THEN DO                     (* Binding - Loose *)
%nonassoc   OF                                  (* | *)
%nonassoc   ASSIGN                              (* | *)
%right      ELSE                                (* | *)
%left       OR                                  (* | *)
%left       AND                                 (* | *)
%nonassoc   EQ NEQ LT LE GT GE                  (* | *)
%left       PLUS MINUS                          (* | *)
%left       TIMES DIVIDE                        (* V *)
%left       UMINUS                      (* Binding - Tight *)

%%
(* Grammar Rules *)

program:    exp         ()

error:  ()
    
exp:    functionCall    ()
    |   lvalue          ()
    |   mathexp         ()
    |   compexp         ()
    |   boolexp         ()
    |   assignment      ()
    |   control         ()
    |   sequence        ()
    |   array           ()
    |   record          ()
    
    |   MINUS exp   %prec   UMINUS  () (* Unary Minus = Negative Sign *)
    
    |   NIL     ()
    |   INT     ()
    |   STRING  ()
    
array:              ID LBRACK exp RBRACK OF exp             ()
record:             ID LBRACE ID EQ exp recordTail RBRACE   ()
recordTail:         COMMA ID EQ exp recordTail              ()
    |               (* empty *)                             ()
sequence:           LPAREN sequenceExp RPAREN               ()
sequenceExp:        exp sequenceTail                        ()
    |               (* empty *)                             ()
sequenceTail:       SEMICOLON exp sequenceTail              ()
    |               (* empty *)                             ()

functionCall:       ID LPAREN functionParam RPAREN          ()
functionParam:      exp functionParamTail                   ()
    |               (* empty *)                             ()
functionParamTail:  COMMA exp functionParamTail             ()
    |               (* empty *)                             ()

(* Procedure calls, assignment, if-then, while, break, and sometimes 
 * if-then-else returns unit *)
assignment: lvalue ASSIGN exp               ()
control:    IF exp THEN exp                 ()
    |       IF exp THEN exp ELSE exp        ()
    |       WHILE exp DO exp                ()
    |       FOR ID ASSIGN exp TO exp DO exp ()
    |       BREAK                           ()
    |       LET decs IN sequenceExp END     ()
    
mathexp:    exp PLUS exp    ()
    |       exp MINUS exp   ()
    |       exp TIMES exp   ()
    |       exp DIVIDE exp  ()

compexp:    exp EQ exp      ()
    |       exp NEQ exp     ()
    |       exp LT exp      ()
    |       exp LE exp      ()
    |       exp GT exp      ()
    |       exp GE exp      ()        

boolexp:    exp AND exp ()
    |       exp OR exp  ()

(* Declarations *)
decs:       dec decs        ()
    |       (* empty *)     ()

dec:        tydec           ()
    |       vardec          ()
    |       fundec          ()
    
(* Data Types *)
tydec:  TYPE ID EQ ty                                              ()

ty:     ID                                                         ()
    |   LBRACE tyfields RBRACE                                     ()
    |   ARRAY OF ID                                                ()

tyfields:       ID COLON ID tyfieldsTail                           ()
    |           (* empty *)                                        ()
tyfieldsTail:   COMMA ID COLON ID tyfieldsTail                     ()
    |           (* empty *)                                        ()

(* Variables *)
vardec:     VAR ID ASSIGN exp                                      ()
    |       VAR ID COLON ID ASSIGN exp                             ()

(* Functions *)
fundec:     FUNCTION ID LPAREN tyfields RPAREN EQ exp              ()
    |       FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp     ()

(* L-Values *)
lvalue:     ID                                                          ()
    |       lvalue DOT ID                                               ()
    |       lvalue LBRACK exp RBRACK                                    ()
    |       ID LBRACK exp RBRACK                                        ()